/* browser.js v1.0.1 | @ajlkn | MIT licensed */
const browserFunc = () => {
  const browser = (() => {
    "use strict";
    const t = {
      name: null,
      version: null,
      os: null,
      osVersion: null,
      touch: null,
      mobile: null,
      _canUse: null,
      canUse: (e) => {
        t._canUse || (t._canUse = document.createElement("div"));
        const n = t._canUse.style;
        const r = e.charAt(0).toUpperCase() + e.slice(1);
        return (
          e in n ||
          `Moz${r}` in n ||
          `Webkit${r}` in n ||
          `O${r}` in n ||
          `ms${r}` in n
        );
      },
      init: () => {
        const e = navigator.userAgent;
        let n = "other";
        let r = 0;
        const i = [
          ["firefox", /Firefox\/([0-9\.]+)/],
          ["bb", /BlackBerry.+Version\/([0-9\.]+)/],
          ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
          ["opera", /OPR\/([0-9\.]+)/],
          ["opera", /Opera\/([0-9\.]+)/],
          ["edge", /Edge\/([0-9\.]+)/],
          ["safari", /Version\/([0-9\.]+).+Safari/],
          ["chrome", /Chrome\/([0-9\.]+)/],
          ["ie", /MSIE ([0-9]+)/],
          ["ie", /Trident\/.+rv:([0-9]+)/],
        ];
  
        for (let o = 0; o < i.length; o++) {
          if (e.match(i[o][1])) {
            n = i[o][0];
            r = parseFloat(RegExp.$1);
            break;
          }
        }
  
        t.name = n;
        t.version = r;
        n = "other";
        const osList = [
          [
            "ios",
            /([0-9_]+) like Mac OS X/,
            (e) => e.replace("_", ".").replace("_", ""),
          ],
          ["ios", /CPU like Mac OS X/, (e) => 0],
          ["wp", /Windows Phone ([0-9\.]+)/, null],
          ["android", /Android ([0-9\.]+)/, null],
          [
            "mac",
            /Macintosh.+Mac OS X ([0-9_]+)/,
            (e) => e.replace("_", ".").replace("_", ""),
          ],
          ["windows", /Windows NT ([0-9\.]+)/, null],
          ["bb", /BlackBerry.+Version\/([0-9\.]+)/, null],
          ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/, null],
          ["linux", /Linux/, null],
          ["bsd", /BSD/, null],
          ["unix", /X11/, null],
        ];
  
        for (let o = r = 0; o < osList.length; o++) {
          if (e.match(osList[o][1])) {
            n = osList[o][0];
            r = parseFloat(
              osList[o][2] ? osList[o][2](RegExp.$1) : RegExp.$1
            );
            break;
          }
        }
  
        if (
          n === "mac" &&
          "ontouchstart" in window &&
          ((1024 === screen.width && 1366 === screen.height) ||
            (834 === screen.width && 1112 === screen.height) ||
            (810 === screen.width && 1080 === screen.height) ||
            (768 === screen.width && 1024 === screen.height))
        ) {
          n = "ios";
        }
  
        t.os = n;
        t.osVersion = r;
        t.touch =
          t.os === "wp"
            ? 0 < navigator.msMaxTouchPoints
            : !!("ontouchstart" in window);
        t.mobile =
          t.os === "wp" ||
          t.os === "android" ||
          t.os === "ios" ||
          t.os === "bb";
      },
    };
  
    t.init();
    return t;
  })();
  
  (function (e, n) {
    if (typeof define === "function" && define.amd) {
      define([], n);
    } else if (typeof exports === "object") {
      module.exports = n();
    } else {
      e.browser = n();
    }
  })(this, function () {
    return browser;
  });
  
}

export default { browserFunc }