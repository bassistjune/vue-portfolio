/* breakpoints.js v1.0 | @ajlkn | MIT licensed */
const breakPointFunc = () => {
  const breakpoints = (() => {
    let list = null;
    const media = {};
    const events = [];
  
    const init = (e) => {
      list = e;
      window.addEventListener("resize", poll);
      window.addEventListener("orientationchange", poll);
      window.addEventListener("load", poll);
      window.addEventListener("fullscreenchange", poll);
    };
  
    const active = (e) => {
      if (!(e in media)) {
        let operator, value, size, condition;
  
        if (e.startsWith(">=")) {
          operator = "gte";
          value = e.substr(2);
        } else if (e.startsWith("<=")) {
          operator = "lte";
          value = e.substr(2);
        } else if (e.startsWith(">")) {
          operator = "gt";
          value = e.substr(1);
        } else if (e.startsWith("<")) {
          operator = "lt";
          value = e.substr(1);
        } else if (e.startsWith("!")) {
          operator = "not";
          value = e.substr(1);
        } else {
          operator = "eq";
          value = e;
        }
  
        if (value && value in list) {
          const breakpoint = list[value];
  
          if (Array.isArray(breakpoint)) {
            const minValue = parseInt(breakpoint[0]);
            const maxValue = parseInt(breakpoint[1]);
  
            if (isNaN(minValue)) {
              if (isNaN(maxValue)) return;
              size = breakpoint[1].substr(String(maxValue).length);
            } else {
              size = breakpoint[0].substr(String(minValue).length);
            }
  
            if (isNaN(minValue)) {
              switch (operator) {
                case "gte":
                  condition = "screen";
                  break;
                case "lte":
                  condition = `screen and (max-width: ${maxValue}${size})`;
                  break;
                case "gt":
                  condition = `screen and (min-width: ${maxValue + 1}${size})`;
                  break;
                case "lt":
                  condition = "screen and (max-width: -1px)";
                  break;
                case "not":
                  condition = `screen and (min-width: ${maxValue + 1}${size})`;
                  break;
                default:
                  condition = `screen and (max-width: ${maxValue}${size})`;
              }
            } else if (isNaN(maxValue)) {
              switch (operator) {
                case "gte":
                  condition = `screen and (min-width: ${minValue}${size})`;
                  break;
                case "lte":
                  condition = "screen";
                  break;
                case "gt":
                  condition = "screen and (max-width: -1px)";
                  break;
                case "lt":
                  condition = `screen and (max-width: ${minValue - 1}${size})`;
                  break;
                case "not":
                  condition = `screen and (max-width: ${minValue - 1}${size})`;
                  break;
                default:
                  condition = `screen and (min-width: ${minValue}${size})`;
              }
            } else {
              switch (operator) {
                case "gte":
                  condition = `screen and (min-width: ${minValue}${size})`;
                  break;
                case "lte":
                  condition = `screen and (max-width: ${maxValue}${size})`;
                  break;
                case "gt":
                  condition = `screen and (min-width: ${maxValue + 1}${size})`;
                  break;
                case "lt":
                  condition = `screen and (max-width: ${minValue - 1}${size})`;
                  break;
                case "not":
                  condition = `screen and (max-width: ${minValue - 1}${size}), screen and (min-width: ${maxValue + 1}${size})`;
                  break;
                default:
                  condition = `screen and (min-width: ${minValue}${size}) and (max-width: ${maxValue}${size})`;
              }
            }
          } else {
            condition = breakpoint.startsWith("(") ? `screen and ${breakpoint}` : breakpoint;
          }
  
          media[e] = condition || false;
        }
      }
  
      return media[e] !== false && window.matchMedia(media[e]).matches;
    };
  
    const on = (e, n) => {
      events.push({ query: e, handler: n, state: false });
      if (active(e)) n();
    };
  
    const poll = () => {
      for (let i = 0; i < events.length; i++) {
        const event = events[i];
        if (active(event.query)) {
          if (!event.state) {
            event.state = true;
            event.handler();
          }
        } else {
          event.state = false;
        }
      }
    };
  
    return {
      init,
      active,
      on,
      poll
    };
  })();
  
  (function (root, factory) {
    if (typeof define === "function" && define.amd) {
      define([], factory);
    } else if (typeof exports === "object") {
      module.exports = factory();
    } else {
      root.breakpoints = factory();
    }
  })(this, function () {
    return breakpoints;
  });
  
  
}

export default { breakPointFunc }